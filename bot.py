from flask import Flask

# –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "–¢—Ä–µ–π–¥-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üî•"
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import DAY_DATA, TERMS, TIMEZONE
from database import init_db, get_user, create_user, update_user_day, add_completed_lesson, get_all_users, get_user_progress

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìñ –¢–µ–æ—Ä–∏—è", callback_data="theory"),
         InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton("üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã", callback_data="examples"),
         InlineKeyboardButton("üìö –¢–µ—Ä–º–∏–Ω—ã", callback_data="terms")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def lesson_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–í—Å—ë –ø–æ–Ω—è–ª! üí™", callback_data="start_quiz")]])

def quiz_keyboard(options):
    keyboard = []
    for option in options:
        keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{option[0]}")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user(user.id)
    
    if not user_data:
        create_user(user.id, user.username)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ\n"
            "–Ø —Ç–≤–æ–π —Ç—Ä–µ–π–¥-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00 –ú–°–ö –ø—Ä–∏—Å—ã–ª–∞—é –Ω–æ–≤—ã–π —É—Ä–æ–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! –¢—ã –Ω–∞ –¥–Ω–µ {user_data['current_day']}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üéØ",
            reply_markup=main_menu_keyboard()
        )

async def day_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = get_user(user.id)
    
    if not user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    
    day = user_data['current_day']
    if day > len(DAY_DATA):
        await update.message.reply_text("–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –¥–Ω–∏! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ")
        return
    
    lesson = DAY_DATA[day]
    message = f"–î–µ–Ω—å {day}. {lesson['topic']}\n\n{lesson['theory']}"
    
    if lesson.get('image_url'):
        await update.message.reply_photo(lesson['image_url'], caption=message, reply_markup=lesson_keyboard())
    else:
        await update.message.reply_text(message, reply_markup=lesson_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    user_data = get_user(user.id)
    day = user_data['current_day'] if user_data else 1
    
    data = query.data
    
    if data == 'start_quiz':
        quiz = DAY_DATA[day]['quiz']
        question = f"üéØ –í–æ–ø—Ä–æ—Å –¥–Ω—è {day}:\n{quiz['question']}\n\n" + "\n".join(quiz['options'])
        await query.edit_message_text(question, reply_markup=quiz_keyboard(quiz['options']))
    
    elif data.startswith('answer_'):
        selected = data.split('_')[1]
        quiz = DAY_DATA[day]['quiz']
        
        if selected == quiz['correct_answer']:
            add_completed_lesson(user.id, day)
            update_user_day(user.id, day + 1)
            await query.edit_message_text(f"‚úÖ –í–µ—Ä–Ω–æ! {quiz['explanation']}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é! üöÄ")
        else:
            await query.edit_message_text(f"‚ùå –ù–µ–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!\n\n{quiz['question']}", reply_markup=quiz_keyboard(quiz['options']))
    
    elif data == 'theory':
        theory_text = "\n\n".join([f"–î–µ–Ω—å {d}: {data['topic']}\n{data['theory']}" for d, data in DAY_DATA.items()])
        await query.edit_message_text(f"üìñ –í—Å—è —Ç–µ–æ—Ä–∏—è:\n\n{theory_text[:4000]}...")
    
    elif data == 'progress':
        progress = get_user_progress(user.id)
        if progress:
            await query.edit_message_text(
                f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"–ü—Ä–æ–π–¥–µ–Ω–æ –¥–Ω–µ–π: {progress['completed']}/{progress['total']}\n"
                f"–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {progress['current_day']}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {progress['total'] - progress['completed']} –¥–Ω–µ–π"
            )
        else:
            await query.edit_message_text("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    elif data == 'examples':
        examples = "\n".join([f"–î–µ–Ω—å {d}: {data['topic']}" for d, data in DAY_DATA.items() if data.get('image_url')])
        await query.edit_message_text(f"üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã:\n\n{examples}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /day —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã")
    
    elif data == 'terms':
        terms_text = "\n\n".join([f"‚Ä¢ {term}: {desc}" for term, desc in TERMS.items()])
        await query.edit_message_text(f"üìö –¢–µ—Ä–º–∏–Ω—ã:\n\n{terms_text[:4000]}...")
    
    elif data == 'help':
        help_text = (
            "‚ùì –ü–æ–º–æ—â—å:\n"
            "/start - –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
            "/day - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫\n"
            "–ú–µ–Ω—é:\n"
            "üìñ –¢–µ–æ—Ä–∏—è - –≤—Å—è —Ç–µ–æ—Ä–∏—è –∫—É—Ä—Å–∞\n"
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å - —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã - –ø—Ä–∏–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
            "üìö –¢–µ—Ä–º–∏–Ω—ã - —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤"
        )
        await query.edit_message_text(help_text)

# –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
async def send_daily_lessons(context: ContextTypes.DEFAULT_TYPE):
    try:
        users = get_all_users()
        for user_id, current_day in users:
            if current_day <= len(DAY_DATA):
                lesson = DAY_DATA[current_day]
                message = f"üìÖ –î–µ–Ω—å {current_day}. {lesson['topic']}\n\n{lesson['theory']}"
                
                try:
                    if lesson.get('image_url'):
                        await context.bot.send_photo(user_id, lesson['image_url'], caption=message, reply_markup=lesson_keyboard())
                    else:
                        await context.bot.send_message(user_id, message, reply_markup=lesson_keyboard())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_lessons: {e}")

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    try:
        users = get_all_users()
        for user_id, current_day in users:
            if current_day <= len(DAY_DATA):
                try:
                    await context.bot.send_message(
                        user_id,
                        f"üëã –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –æ–±—É—á–µ–Ω–∏–µ! –î–µ–Ω—å {current_day} –∂–¥—ë—Ç —Ç–µ–±—è!\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π /day —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫ üöÄ",
                        reply_markup=main_menu_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not BOT_TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("day", day_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(send_daily_lessons, CronTrigger(hour=19, minute=0), args=[application])  # 19:00 –ú–°–ö
    scheduler.add_job(send_reminders, CronTrigger(hour=21, minute=0), args=[application])      # 21:00 –ú–°–ö
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    application.run_polling()

if __name__ == "__main__":
    main()
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from threading import Thread
    Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()
    main()
